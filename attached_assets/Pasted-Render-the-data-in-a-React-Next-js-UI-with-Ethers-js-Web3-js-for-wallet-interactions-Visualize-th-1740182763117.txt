Render the data in a React + Next.js UI with Ethers.js/Web3.js for wallet interactions.
Visualize the liquidity ranges and positions using charts (e.g., Recharts/D3.js).
1Ô∏è‚É£ Data Fetching: Slipstream & Uniswap V3
Fetching Slipstream Positions
Use Slipstream's API or The Graph to get open positions.

javascript
Copy
Edit
const fetchSlipstreamPositions = async (walletAddress) => {
    const response = await fetch(`https://api.slipstream.com/v1/positions?wallet=${walletAddress}`);
    const data = await response.json();
    return data.positions;
};
Fetching Uniswap V3 LP NFTs
Use The Graph to pull NFT-based LP positions:

javascript
Copy
Edit
import { gql } from "@apollo/client";
import { client } from "../utils/apolloClient"; // Apollo client setup

const GET_UNISWAP_V3_LP_POSITIONS = gql`
  query ($wallet: String!) {
    positions(where: { owner: $wallet }) {
      id
      pool {
        token0 { symbol }
        token1 { symbol }
        feeTier
        tickLower { price0 }
        tickUpper { price0 }
        liquidity
      }
    }
  }
`;

const fetchUniswapPositions = async (walletAddress) => {
    const { data } = await client.query({
        query: GET_UNISWAP_V3_LP_POSITIONS,
        variables: { wallet: walletAddress.toLowerCase() },
    });
    return data.positions;
};
2Ô∏è‚É£ Frontend UI in React (Next.js)
Now, let's render Slipstream & Uniswap positions in a dashboard UI.

React Component for Portfolio Display
javascript
Copy
Edit
import React, { useEffect, useState } from "react";
import { fetchSlipstreamPositions, fetchUniswapPositions } from "../utils/api";
import { useWallet } from "@web3-react/core";
import { Card } from "@/components/ui/card"; // Using Shadcn UI
import { BarChart, Bar, XAxis, YAxis, Tooltip } from "recharts"; // For LP visual

const Portfolio = () => {
    const { account } = useWallet();
    const [slipstreamPositions, setSlipstreamPositions] = useState([]);
    const [uniswapPositions, setUniswapPositions] = useState([]);

    useEffect(() => {
        if (!account) return;
        async function fetchData() {
            const slipData = await fetchSlipstreamPositions(account);
            const uniData = await fetchUniswapPositions(account);
            setSlipstreamPositions(slipData);
            setUniswapPositions(uniData);
        }
        fetchData();
    }, [account]);

    return (
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 p-4">
            {/* Slipstream Positions */}
            <div>
                <h2 className="text-xl font-bold">Slipstream Positions</h2>
                {slipstreamPositions.map((pos) => (
                    <Card key={pos.id} className="p-4 shadow-lg">
                        <p><strong>Pair:</strong> {pos.pair}</p>
                        <p><strong>Size:</strong> {pos.size} {pos.asset}</p>
                        <p><strong>Entry Price:</strong> ${pos.entryPrice}</p>
                        <p><strong>Current Price:</strong> ${pos.currentPrice}</p>
                        <p className={`${pos.pnl > 0 ? "text-green-500" : "text-red-500"}`}>
                            <strong>PNL:</strong> {pos.pnl.toFixed(2)}%
                        </p>
                    </Card>
                ))}
            </div>

            {/* Uniswap V3 Positions */}
            <div>
                <h2 className="text-xl font-bold">Uniswap V3 LP NFTs</h2>
                {uniswapPositions.map((lp) => (
                    <Card key={lp.id} className="p-4 shadow-lg">
                        <p><strong>Pool:</strong> {lp.pool.token0.symbol} / {lp.pool.token1.symbol}</p>
                        <p><strong>Fee Tier:</strong> {lp.pool.feeTier / 10000}%</p>
                        <p><strong>Liquidity:</strong> {lp.pool.liquidity}</p>
                        <p><strong>Price Range:</strong> ${parseFloat(lp.pool.tickLower.price0).toFixed(2)} - ${parseFloat(lp.pool.tickUpper.price0).toFixed(2)}</p>
                    </Card>
                ))}
            </div>

            {/* LP Position Chart */}
            <div className="col-span-2">
                <h2 className="text-xl font-bold">Liquidity Position Visualization</h2>
                <BarChart width={600} height={300} data={uniswapPositions.map(lp => ({
                    pool: `${lp.pool.token0.symbol}-${lp.pool.token1.symbol}`,
                    range: [parseFloat(lp.pool.tickLower.price0), parseFloat(lp.pool.tickUpper.price0)]
                }))}>
                    <XAxis dataKey="pool" />
                    <YAxis />
                    <Tooltip />
                    <Bar dataKey="range" fill="#4F46E5" />
                </BarChart>
            </div>
        </div>
    );
};

export default Portfolio;
3Ô∏è‚É£ Features & Enhancements
‚úÖ Features Covered
Fetches Slipstream positions (perpetual trading) via API.
Fetches Uniswap V3 LP positions (NFT-based) via The Graph.
Displays both positions & key metrics in a clean UI.
Visualizes LP positions with a bar chart for range-bound liquidity.
üìå Future Enhancements
üîπ Auto-rebalancing alerts when LP positions go out of range.
üîπ Auto-compound LP fees for Uniswap liquidity positions.
üîπ Slippage & impermanent loss tracking for LP holdings.
üîπ Gas fee optimizer for trading or adjusting LP positions.
üîπ Portfolio performance tracking over time.

