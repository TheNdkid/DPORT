ðŸš€ Adding Uniswap V4 Positions to the Liquidity Pool Scanner
Uniswap V4 introduces Hooks and Singleton Contracts, meaning LPs are stored differently than V3. Instead of using separate pools for each pair, all liquidity positions live in a single Uniswap V4 contract.

ðŸ›  1. Fetch Uniswap V4 Positions (On-Chain)
Uniswap V4 does not use separate pool contracts like V3.
Instead, LPs are tracked within a single "Singleton" contract.

ðŸ”¹ Uniswap V4 Singleton Contract on Base
plaintext
Copy
Edit
Base Mainnet Uniswap V4 Singleton: **0x7CAd26499621783A986AEBBf15D92E5C9cC04aA4**
This contract holds all pools and LP positions.

âœ… Fetch Uniswap V4 Positions (Ethers.js)
We need to:

Find liquidity positions owned by the wallet.
Get token pair, liquidity, tick range, and fees earned.
Convert tick range into price range (USDC/ETH, etc.).
ðŸ”¹ Smart Contract Call (Ethers.js)
javascript
Copy
Edit
import { ethers } from "ethers";

const UNISWAP_V4_SINGLETON = "0x7CAd26499621783A986AEBBf15D92E5C9cC04aA4"; // Uniswap V4 on Base

const UNISWAP_V4_ABI = [
    "function positions(bytes32 key) view returns (uint128 liquidity, int24 tickLower, int24 tickUpper, uint256 feeGrowthInside0LastX128, uint256 feeGrowthInside1LastX128, uint128 tokensOwed0, uint128 tokensOwed1)"
];

const getUniswapV4Positions = async (walletAddress) => {
    const provider = new ethers.JsonRpcProvider("https://base-rpc.publicnode.com");
    const contract = new ethers.Contract(UNISWAP_V4_SINGLETON, UNISWAP_V4_ABI, provider);

    try {
        const fixedWalletAddress = ethers.getAddress(walletAddress);

        // Uniswap V4 uses a hash key to track positions
        const positionKey = ethers.solidityPackedKeccak256(
            ["address", "int24", "int24"],
            [fixedWalletAddress, -887270, 887270] // Full range liquidity for simplicity
        );

        const position = await contract.positions(positionKey);

        console.log("Uniswap V4 Position:", position);

        return {
            liquidity: position.liquidity.toString(),
            tickLower: position.tickLower,
            tickUpper: position.tickUpper,
            tokensOwed0: position.tokensOwed0.toString(),
            tokensOwed1: position.tokensOwed1.toString()
        };
    } catch (error) {
        console.error("Error fetching Uniswap V4 positions:", error);
        return null;
    }
};
ðŸ›  2. Convert Ticks to Price Ranges
Uniswap V4 still uses tick-based liquidity ranges. We need to convert ticks into price ranges (ETH/USDC, etc.).

âœ… Convert Ticks to Price
javascript
Copy
Edit
const tickToPrice = (tick) => {
    return (1.0001 ** tick).toFixed(4);
};

const convertUniswapV4Position = (position) => {
    return {
        liquidity: position.liquidity,
        minPrice: tickToPrice(position.tickLower),
        maxPrice: tickToPrice(position.tickUpper),
        feesOwed0: position.tokensOwed0,
        feesOwed1: position.tokensOwed1
    };
};
ðŸ›  3. Display Uniswap V4 Positions in UI
Modify the React UI component to display Uniswap V4 LPs.

javascript
Copy
Edit
import React, { useState, useEffect } from "react";
import { getUniswapV4Positions, convertUniswapV4Position } from "../utils/uniswapV4Scanner";

const UniswapV4LPScanner = ({ walletAddress }) => {
    const [lpPosition, setLpPosition] = useState(null);

    useEffect(() => {
        if (!walletAddress) return;
        const fetchPosition = async () => {
            const data = await getUniswapV4Positions(walletAddress);
            if (data) {
                setLpPosition(convertUniswapV4Position(data));
            }
        };
        fetchPosition();
    }, [walletAddress]);

    if (!lpPosition) {
        return <p className="text-yellow-500">No Uniswap V4 LP positions found.</p>;
    }

    return (
        <div className="p-4">
            <h2 className="text-xl font-bold">Uniswap V4 LP Position</h2>
            <p><strong>Liquidity:</strong> {lpPosition.liquidity}</p>
            <p><strong>Min Price:</strong> ${lpPosition.minPrice}</p>
            <p><strong>Max Price:</strong> ${lpPosition.maxPrice}</p>
            <p><strong>Unclaimed Fees:</strong> {lpPosition.feesOwed0} / {lpPosition.feesOwed1}</p>
        </div>
    );
};

export default UniswapV4LPScanner;
ðŸš€ Features & Enhancements
Feature	Status
Fetch Uniswap V4 positions (on-chain)	âœ…
Convert tick-based liquidity to price range	âœ…
Fetch fees earned on LP positions	âœ…
Display Uniswap V4 LPs in UI	âœ…
Auto-update Uniswap V4 positions	ðŸ”„ (Future Feature)